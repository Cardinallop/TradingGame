[{"C:\\Users\\micha\\OneDrive\\Documents\\TradingGame\\TradingGame\\frontend\\src\\index.js":"1","C:\\Users\\micha\\OneDrive\\Documents\\TradingGame\\TradingGame\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\micha\\OneDrive\\Documents\\TradingGame\\TradingGame\\frontend\\src\\App.js":"3","C:\\Users\\micha\\OneDrive\\Documents\\TradingGame\\TradingGame\\frontend\\src\\components\\DashBoard\\DashBoard.jsx":"4","C:\\Users\\micha\\OneDrive\\Documents\\TradingGame\\TradingGame\\frontend\\src\\components\\Login\\LoginPage.jsx":"5","C:\\Users\\micha\\OneDrive\\Documents\\TradingGame\\TradingGame\\frontend\\src\\components\\Login\\SignupPage.jsx":"6","C:\\Users\\micha\\OneDrive\\Documents\\TradingGame\\TradingGame\\frontend\\src\\components\\DashBoard\\Header.jsx":"7","C:\\Users\\micha\\OneDrive\\Documents\\TradingGame\\TradingGame\\frontend\\src\\components\\DashBoard\\Profile\\ProfileInfo.jsx":"8","C:\\Users\\micha\\OneDrive\\Documents\\TradingGame\\TradingGame\\frontend\\src\\components\\DashBoard\\Homepage\\Homepage.jsx":"9","C:\\Users\\micha\\OneDrive\\Documents\\TradingGame\\TradingGame\\frontend\\src\\components\\DashBoard\\Homepage\\BuyItem.jsx":"10","C:\\Users\\micha\\OneDrive\\Documents\\TradingGame\\TradingGame\\frontend\\src\\components\\DashBoard\\Homepage\\SellItem.jsx":"11","C:\\Users\\micha\\OneDrive\\Documents\\TradingGame\\TradingGame\\frontend\\src\\components\\DashBoard\\Homepage\\Item.jsx":"12","C:\\Users\\micha\\OneDrive\\Documents\\TradingGame\\TradingGame\\frontend\\src\\components\\DashBoard\\Homepage\\LeaderBoard.jsx":"13","C:\\Users\\micha\\OneDrive\\Documents\\TradingGame\\TradingGame\\frontend\\src\\components\\DashBoard\\Homepage\\UserRank.jsx":"14","C:\\Users\\micha\\OneDrive\\Documents\\TradingGame\\TradingGame\\frontend\\src\\components\\nav_bar.js":"15","C:\\Users\\micha\\OneDrive\\Documents\\TradingGame\\TradingGame\\frontend\\src\\components\\DashBoard\\pages\\about_page.js":"16"},{"size":612,"mtime":1610486334353,"results":"17","hashOfConfig":"18"},{"size":362,"mtime":499162500000,"results":"19","hashOfConfig":"18"},{"size":1217,"mtime":1610486794380,"results":"20","hashOfConfig":"18"},{"size":2402,"mtime":1610486766390,"results":"21","hashOfConfig":"18"},{"size":2976,"mtime":1610482834921,"results":"22","hashOfConfig":"18"},{"size":5031,"mtime":1610481338789,"results":"23","hashOfConfig":"18"},{"size":427,"mtime":1610482725595,"results":"24","hashOfConfig":"18"},{"size":7420,"mtime":1610481359711,"results":"25","hashOfConfig":"18"},{"size":1764,"mtime":1610481579882,"results":"26","hashOfConfig":"18"},{"size":3774,"mtime":1610475851375,"results":"27","hashOfConfig":"18"},{"size":3706,"mtime":1610482806886,"results":"28","hashOfConfig":"18"},{"size":1894,"mtime":1610482474212,"results":"29","hashOfConfig":"18"},{"size":2076,"mtime":1610481338779,"results":"30","hashOfConfig":"18"},{"size":587,"mtime":1610475851242,"results":"31","hashOfConfig":"18"},{"size":353,"mtime":1610486334351,"results":"32","hashOfConfig":"18"},{"size":1175,"mtime":1610486732843,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1s0wbiq",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\micha\\OneDrive\\Documents\\TradingGame\\TradingGame\\frontend\\src\\index.js",[],"C:\\Users\\micha\\OneDrive\\Documents\\TradingGame\\TradingGame\\frontend\\src\\reportWebVitals.js",[],["71","72"],"C:\\Users\\micha\\OneDrive\\Documents\\TradingGame\\TradingGame\\frontend\\src\\App.js",["73","74","75","76","77"],"C:\\Users\\micha\\OneDrive\\Documents\\TradingGame\\TradingGame\\frontend\\src\\components\\DashBoard\\DashBoard.jsx",["78","79","80","81","82","83"],"C:\\Users\\micha\\OneDrive\\Documents\\TradingGame\\TradingGame\\frontend\\src\\components\\Login\\LoginPage.jsx",["84"],"import React, { Component } from \"react\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'mdbreact/dist/css/mdb.css';\r\nimport './LoginPage.css'\r\nimport { AiOutlineUser } from \"react-icons/ai\";\r\nimport { AiOutlineLock } from \"react-icons/ai\";\r\n\r\nclass LoginPage extends Component{\r\n\r\n    state = {\r\n        hasFailed: false,\r\n    };\r\n\r\n    /**\r\n     * This method will call the api and pass the username and password input fields. The api will give us the authentication status\r\n     */\r\n    attemptLogin = (event) => {\r\n        event.preventDefault();\r\n        let username = event.target.username.value;\r\n        let password = event.target.password.value;\r\n\r\n        //Call the api\r\n\r\n        //redirect to dashboard\r\n        this.props.history.push({\r\n            pathname: \"/dashboard\",\r\n            username: username\r\n        });\r\n    }\r\n\r\n    /**\r\n     * This method displays a failed login message after a failed login attempt\r\n     */\r\n    displayFailedLogin = () => {\r\n        if(this.state.hasFailed){\r\n            return <small style={{color: \"red\"}}>*Failed Login attempt. Please try again!</small>\r\n        }\r\n    }\r\n\r\n    redirectToRegister = () => {\r\n        this.props.history.push({\r\n            pathname: \"/signup\"\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <div className=\"container\">\r\n                    <div className=\"d-flex justify-content-end\" style={{marginBottom:\"50px\"}}>\r\n                        <button type=\"button\" onClick={this.redirectToRegister} className=\"btn btn-dark\">Register</button>\r\n                    </div>\r\n                    <h1>Login</h1>\r\n                    {this.displayFailedLogin()}\r\n                    <div className=\"row\">\r\n                        <div className=\"col\" />\r\n                        <div className=\"col-md-5\">\r\n                            <form onSubmit={this.attemptLogin}>\r\n                                <div className=\"md-form\">\r\n                                    <AiOutlineUser className=\"prefix d-flex justify-content-start\" />\r\n                                    <input type=\"text\" className=\"form-control\" id=\"username\" placeholder=\"Username\" required />\r\n                                </div>\r\n                                <div className=\"md-form\">\r\n                                    <AiOutlineLock className=\"prefix d-flex justify-content-start\" />\r\n                                    <input type=\"text\" className=\"form-control\" id=\"password\" placeholder=\"Password\" required />\r\n                                </div>\r\n                                <button type=\"submit\" className=\"btn btn-primary d-flex justify-content-start\">Login</button>\r\n                            </form>\r\n                        </div>\r\n                        <div className=\"col\" />\r\n                    </div>\r\n                    \r\n                </div>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default LoginPage;","C:\\Users\\micha\\OneDrive\\Documents\\TradingGame\\TradingGame\\frontend\\src\\components\\Login\\SignupPage.jsx",["85","86","87","88","89","90","91","92"],"import React, { Component } from \"react\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'mdbreact/dist/css/mdb.css';\r\nimport './LoginPage.css'\r\nimport { AiOutlineUser } from \"react-icons/ai\";\r\nimport { AiOutlineLock } from \"react-icons/ai\";\r\nimport { AiOutlinePhone } from \"react-icons/ai\";\r\nimport { AiOutlineMail } from \"react-icons/ai\";\r\nimport { FaRegAddressBook } from \"react-icons/fa\";\r\n\r\nclass SignUpPage extends Component{\r\n\r\n    state = {\r\n\r\n    };\r\n\r\n    /**\r\n     * This method will take in the fields and send a post request to the api to register users\r\n     * @param {} event is the form that contains all the input fields\r\n     */\r\n    register = (event) => {\r\n        event.preventDefault();\r\n        let username = event.target.username.value;\r\n        let firstname = event.target.firstname.value;\r\n        let lastname = event.target.lastname.value;\r\n        let password = event.target.password.value;\r\n        let confirmPassword = event.target.confirmPassword.value;\r\n        let address = event.target.address.value;\r\n        let phone = event.target.phone.value;\r\n        let email = event.target.email.value;\r\n\r\n        //call the api\r\n\r\n        //redirect\r\n        this.props.history.push({\r\n            pathname: \"/login\"\r\n        });\r\n    }\r\n\r\n    redirectToLogin = () => {\r\n        this.props.history.push({\r\n            pathname: \"/login\"\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <div className=\"container\">\r\n                    <div className=\"d-flex justify-content-end\" style={{marginBottom:\"50px\"}}>\r\n                        <button type=\"button\" onClick={this.redirectToLogin} className=\"btn btn-dark\">Login</button>\r\n                    </div>\r\n\r\n                    <h1>Register</h1>\r\n                    <div className=\"row\">\r\n                        <div className=\"col\" />\r\n                        <div className=\"col-md-5\">\r\n                            <form onSubmit={this.register}>\r\n                                <div className=\"md-form\">\r\n                                    <AiOutlineUser className=\"prefix d-flex justify-content-start\" />\r\n                                    <input type=\"text\" className=\"form-control\" id=\"username\" placeholder=\"Username\" required />\r\n                                </div>\r\n                                <div className=\"md-form\">\r\n                                    <AiOutlineUser className=\"prefix d-flex justify-content-start\" />\r\n                                    <input type=\"text\" className=\"form-control\" id=\"firstname\" placeholder=\"First Name\" required />\r\n                                </div>\r\n                                <div className=\"md-form\">\r\n                                    <AiOutlineUser className=\"prefix d-flex justify-content-start\" />\r\n                                    <input type=\"text\" className=\"form-control\" id=\"lastname\" placeholder=\"Last Name\" required />\r\n                                </div>\r\n                                <div className=\"md-form\">\r\n                                    <AiOutlineLock className=\"prefix d-flex justify-content-start\" />\r\n                                    <input type=\"text\" className=\"form-control\" id=\"password\" placeholder=\"Password\" required />\r\n                                </div>\r\n                                <div className=\"md-form\">\r\n                                    <AiOutlineLock className=\"prefix d-flex justify-content-start\" />\r\n                                    <input type=\"text\" className=\"form-control\" id=\"confirmPassword\" placeholder=\"Confirm Password\" required />\r\n                                </div>\r\n                                <div className=\"md-form\">\r\n                                    <FaRegAddressBook className=\"prefix d-flex justify-content-start\" />\r\n                                    <input type=\"text\" className=\"form-control\" id=\"address\" placeholder=\"Address\" />\r\n                                </div>\r\n                                <div className=\"md-form\">\r\n                                    <AiOutlinePhone className=\"prefix d-flex justify-content-start\" />\r\n                                    <input type=\"text\" className=\"form-control\" id=\"phone\" placeholder=\"Phone\" />\r\n                                </div>\r\n                                <div className=\"md-form\">\r\n                                    <AiOutlineMail className=\"prefix d-flex justify-content-start\" />\r\n                                    <input type=\"text\" className=\"form-control\" id=\"email\" placeholder=\"Email\" required />\r\n                                </div>\r\n                                <button className=\"btn btn-primary d-flex justify-content-start\">Register</button>\r\n                            </form>\r\n                        </div>\r\n                        <div className=\"col\" />\r\n                    </div>\r\n                    \r\n                </div>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default SignUpPage;","C:\\Users\\micha\\OneDrive\\Documents\\TradingGame\\TradingGame\\frontend\\src\\components\\DashBoard\\Header.jsx",[],"C:\\Users\\micha\\OneDrive\\Documents\\TradingGame\\TradingGame\\frontend\\src\\components\\DashBoard\\Profile\\ProfileInfo.jsx",[],"C:\\Users\\micha\\OneDrive\\Documents\\TradingGame\\TradingGame\\frontend\\src\\components\\DashBoard\\Homepage\\Homepage.jsx",[],"C:\\Users\\micha\\OneDrive\\Documents\\TradingGame\\TradingGame\\frontend\\src\\components\\DashBoard\\Homepage\\BuyItem.jsx",["93","94"],"import React, { Component } from \"react\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'mdbreact/dist/css/mdb.css';\r\nimport Item from \"./Item\";\r\n\r\nclass BuyItem extends Component{\r\n\r\n    state={\r\n        items: [],\r\n        totalPrice: 0.00,\r\n        itemsBought: new Map(),\r\n    };\r\n\r\n    componentDidMount = () =>{\r\n        this.fillStateWithTestInfo();\r\n    }\r\n\r\n    /**\r\n     * This method keeps track of all the items and their quantities that the user wants to buy by storing the values in a hashamp\r\n     * @param {JSON} item contains name, price, and quantity fields\r\n     */\r\n    addToCart = (item) => {\r\n        let map = this.state.itemsBought;\r\n        map.set(item.name, item);\r\n        this.calculateTotal();   \r\n    }\r\n\r\n    /**\r\n     * Calculates the running sum of the prices of all the items the user wants to buy\r\n     */\r\n    calculateTotal = () => {\r\n        var itemsBought = this.state.itemsBought;\r\n        var totalPrice = 0;\r\n        for(let[key, value] of itemsBought){\r\n            totalPrice += (value.price * value.quantity);\r\n        }\r\n        totalPrice = (Math.round(totalPrice * 100) / 100).toFixed(2);\r\n        this.setState({totalPrice: totalPrice});\r\n    }\r\n\r\n    /**\r\n     * This method is for testing purposes\r\n     */\r\n    fillStateWithTestInfo = () => {\r\n        let newState = [];\r\n        newState.push({\r\n            name: \"apple\",\r\n            price: 5.37,\r\n            quantity: 5\r\n        });\r\n        newState.push({\r\n            name: \"orange\",\r\n            price: 2,\r\n            quantity: 10\r\n        });\r\n        newState.push({\r\n            name: \"watermelon\",\r\n            price: 10,\r\n            quantity: 4\r\n        });\r\n        this.setState({items: newState});\r\n    }\r\n\r\n    /**\r\n     * This method will convert the map of selected items into a JSON and send it as a post request to the api\r\n     */\r\n    buyItems = () => {\r\n        let selected = this.state.itemsSold;\r\n        let json = [];\r\n        for(let[key,value] of selected){\r\n            json.push(value);\r\n        }\r\n\r\n        //== INCOMPLETE ==\r\n        //write api call to server\r\n    }\r\n\r\n    render(){\r\n        return (\r\n\r\n            <div className=\"card\">\r\n                <div className=\"card-header\">Buy Items</div>\r\n                <div className=\"card-body\">\r\n                    \r\n                    <table className=\"table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th scope=\"col\">Item Name</th>\r\n                                <th scope=\"col\">Price</th>\r\n                                <th scope=\"col\">Quantity</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {this.state.items.map( (item, index) => (\r\n                                <Item\r\n                                    key={index}\r\n                                    name={item.name}\r\n                                    price={item.price}\r\n                                    quantity={item.quantity}\r\n                                    addToCart={this.addToCart}\r\n                                />\r\n                            ) )}\r\n                        </tbody>\r\n\r\n                    </table>\r\n\r\n                    \r\n                    <div className=\"d-flex justify-content-end\">\r\n                        <span>Total: ${parseFloat(this.state.totalPrice)}</span>\r\n                    </div>\r\n                    <div className=\"d-flex justify-content-end\">\r\n                        <button className=\"btn btn-primary\">Purchase</button>\r\n                    </div>\r\n                    \r\n                </div>\r\n            </div>\r\n\r\n            \r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default BuyItem;","C:\\Users\\micha\\OneDrive\\Documents\\TradingGame\\TradingGame\\frontend\\src\\components\\DashBoard\\Homepage\\SellItem.jsx",["95","96"],"import React, { Component } from \"react\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'mdbreact/dist/css/mdb.css';\r\nimport Item from \"./Item\";\r\n\r\nclass SellItem extends Component{\r\n\r\n    state={\r\n        items: [],\r\n        totalPrice: 0.00,\r\n        itemsSold: new Map(),\r\n    };\r\n\r\n    componentDidMount = () =>{\r\n        this.fillStateWithTestInfo();\r\n    }\r\n\r\n    /**\r\n     * This method keeps track of all the items and their quantities that the user wants to buy by storing the values in a hashamp\r\n     * @param {JSON} item contains name, price, and quantity fields\r\n     */\r\n    addToCart = (item) => {\r\n        let map = this.state.itemsSold;\r\n        map.set(item.name, item);\r\n        this.calculateTotal();   \r\n    }\r\n\r\n    /**\r\n     * Calculates the running sum of the prices of all the items the user wants to buy\r\n     */\r\n    calculateTotal = () => {\r\n        let itemsSold = this.state.itemsSold;\r\n        let totalPrice = 0;\r\n        for(let[key, value] of itemsSold){\r\n            totalPrice += (value.price * value.quantity);\r\n        }\r\n        totalPrice = (Math.round(totalPrice * 100) / 100).toFixed(2);\r\n        this.setState({totalPrice: totalPrice});\r\n    }\r\n\r\n    /**\r\n     * This method is for testing purposes\r\n     */\r\n    fillStateWithTestInfo = () => {\r\n        let newState = [];\r\n        \r\n        newState.push({\r\n            name: \"orange\",\r\n            price: 2,\r\n            quantity: 3\r\n        });\r\n        newState.push({\r\n            name: \"watermelon\",\r\n            price: 10,\r\n            quantity: 1\r\n        });\r\n        newState.push({\r\n            name: \"apple\",\r\n            price: 5.37,\r\n            quantity: 2\r\n        });\r\n        this.setState({items: newState});\r\n    }\r\n\r\n    /**\r\n     * This method will convert the map of selected items into a JSON and send it as a post request to the api\r\n     */\r\n    sellItems = () => {\r\n        let selected = this.state.itemsSold;\r\n        let json = [];\r\n        for(let[key,value] of selected){\r\n            json.push(value);\r\n        }\r\n\r\n        //== INCOMPLETE ==\r\n        //write api call to server\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"card\">\r\n                <div className=\"card-header\">Sell Items</div>\r\n                <div className=\"card-body\">\r\n                    <table className=\"table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th scope=\"col\">Item Name</th>\r\n                                <th scope=\"col\">Price</th>\r\n                                <th scope=\"col\">Quantity</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {this.state.items.map( (item, index) => (\r\n                                <Item\r\n                                    key={index}\r\n                                    name={item.name}\r\n                                    price={item.price}\r\n                                    quantity={item.quantity}\r\n                                    addToCart={this.addToCart}\r\n                                />\r\n                            ) )}\r\n                        </tbody>\r\n\r\n                    </table>\r\n\r\n                    \r\n                    <div className=\"d-flex justify-content-end\">\r\n                        <span>Total: ${parseFloat(this.state.totalPrice)}</span>\r\n                    </div>\r\n                    <div className=\"d-flex justify-content-end\">\r\n                        <button className=\"btn btn-primary\">Sell</button>\r\n                    </div>\r\n                </div>          \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SellItem;","C:\\Users\\micha\\OneDrive\\Documents\\TradingGame\\TradingGame\\frontend\\src\\components\\DashBoard\\Homepage\\Item.jsx",[],"C:\\Users\\micha\\OneDrive\\Documents\\TradingGame\\TradingGame\\frontend\\src\\components\\DashBoard\\Homepage\\LeaderBoard.jsx",[],"C:\\Users\\micha\\OneDrive\\Documents\\TradingGame\\TradingGame\\frontend\\src\\components\\DashBoard\\Homepage\\UserRank.jsx",[],"C:\\Users\\micha\\OneDrive\\Documents\\TradingGame\\TradingGame\\frontend\\src\\components\\nav_bar.js",[],"C:\\Users\\micha\\OneDrive\\Documents\\TradingGame\\TradingGame\\frontend\\src\\components\\DashBoard\\pages\\about_page.js",[],{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","severity":1,"message":"102","line":1,"column":17,"nodeType":"103","messageId":"104","endLine":1,"endColumn":26},{"ruleId":"101","severity":1,"message":"105","line":2,"column":8,"nodeType":"103","messageId":"104","endLine":2,"endColumn":12},{"ruleId":"101","severity":1,"message":"106","line":4,"column":8,"nodeType":"103","messageId":"104","endLine":4,"endColumn":14},{"ruleId":"101","severity":1,"message":"107","line":8,"column":3,"nodeType":"103","messageId":"104","endLine":8,"endColumn":9},{"ruleId":"101","severity":1,"message":"108","line":10,"column":3,"nodeType":"103","messageId":"104","endLine":10,"endColumn":7},{"ruleId":"109","severity":1,"message":"110","line":29,"column":32,"nodeType":"111","messageId":"112","endLine":29,"endColumn":34},{"ruleId":"109","severity":1,"message":"110","line":31,"column":38,"nodeType":"111","messageId":"112","endLine":31,"endColumn":40},{"ruleId":"109","severity":1,"message":"110","line":33,"column":38,"nodeType":"111","messageId":"112","endLine":33,"endColumn":40},{"ruleId":"109","severity":1,"message":"110","line":66,"column":66,"nodeType":"111","messageId":"112","endLine":66,"endColumn":68},{"ruleId":"109","severity":1,"message":"110","line":70,"column":66,"nodeType":"111","messageId":"112","endLine":70,"endColumn":68},{"ruleId":"109","severity":1,"message":"110","line":74,"column":66,"nodeType":"111","messageId":"112","endLine":74,"endColumn":68},{"ruleId":"101","severity":1,"message":"113","line":20,"column":13,"nodeType":"103","messageId":"104","endLine":20,"endColumn":21},{"ruleId":"101","severity":1,"message":"114","line":23,"column":13,"nodeType":"103","messageId":"104","endLine":23,"endColumn":21},{"ruleId":"101","severity":1,"message":"115","line":24,"column":13,"nodeType":"103","messageId":"104","endLine":24,"endColumn":22},{"ruleId":"101","severity":1,"message":"116","line":25,"column":13,"nodeType":"103","messageId":"104","endLine":25,"endColumn":21},{"ruleId":"101","severity":1,"message":"113","line":26,"column":13,"nodeType":"103","messageId":"104","endLine":26,"endColumn":21},{"ruleId":"101","severity":1,"message":"117","line":27,"column":13,"nodeType":"103","messageId":"104","endLine":27,"endColumn":28},{"ruleId":"101","severity":1,"message":"118","line":28,"column":13,"nodeType":"103","messageId":"104","endLine":28,"endColumn":20},{"ruleId":"101","severity":1,"message":"119","line":29,"column":13,"nodeType":"103","messageId":"104","endLine":29,"endColumn":18},{"ruleId":"101","severity":1,"message":"120","line":30,"column":13,"nodeType":"103","messageId":"104","endLine":30,"endColumn":18},{"ruleId":"101","severity":1,"message":"121","line":34,"column":17,"nodeType":"103","messageId":"104","endLine":34,"endColumn":20},{"ruleId":"101","severity":1,"message":"121","line":70,"column":17,"nodeType":"103","messageId":"104","endLine":70,"endColumn":20},{"ruleId":"101","severity":1,"message":"121","line":34,"column":17,"nodeType":"103","messageId":"104","endLine":34,"endColumn":20},{"ruleId":"101","severity":1,"message":"121","line":71,"column":17,"nodeType":"103","messageId":"104","endLine":71,"endColumn":20},"no-native-reassign",["122"],"no-negated-in-lhs",["123"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'logo' is defined but never used.","'NavBar' is defined but never used.","'Switch' is defined but never used.","'Link' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'password' is assigned a value but never used.","'username' is assigned a value but never used.","'firstname' is assigned a value but never used.","'lastname' is assigned a value but never used.","'confirmPassword' is assigned a value but never used.","'address' is assigned a value but never used.","'phone' is assigned a value but never used.","'email' is assigned a value but never used.","'key' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]